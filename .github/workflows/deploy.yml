name: CI/CD Symfony API

# Déclenchement du pipeline sur les push et pull requests vers main et dev
on:
    push:
        branches: [main, dev]
    pull_request:
        branches: [main, dev]

# Variables d'environnement globales pour tous les jobs
env:
    PHP_VERSION: "8.2.12"
    PHP_EXTENSIONS: "mbstring, pdo_pgsql, intl, zip"
    APP_SECRET: "ci_secret_key_for_testing"
    APP_URL: "http://localhost:8000"
    JWT_SECRET: "fake_jwt_secret_key_for_ci_testing_only"
    MAILER_DSN: "null://null"
    FRONTEND_URL: "http://localhost:3000"
    DATABASE_HOST: "localhost"
    DATABASE_PORT: "5432"
    DATABASE_USER: "postgres"
    DATABASE_PASSWORD: "postgres"
    DATABASE_NAME: "formbuilder"
    STRIPE_SECRET_KEY: "sk_test_fake_key_for_testing"
    STRIPE_PUBLISHABLE_KEY: "pk_test_fake_key_for_testing"
    STRIPE_WEBHOOK_SECRET: "whsec_fake_webhook_secret_for_testing"

jobs:
    # Job 1: Vérification de la qualité du code
    quality:
        runs-on: ubuntu-latest
        steps:
            # Récupération du code source depuis le repository
            - uses: actions/checkout@v4

            # Configuration de PHP avec les extensions nécessaires et xdebug pour la couverture
            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ env.PHP_VERSION }}
                  extensions: ${{ env.PHP_EXTENSIONS }}
                  coverage: xdebug

            # Mise en cache des dépendances Composer pour accélérer les builds
            - name: Cache dependencies
              uses: actions/cache@v3
              with:
                  path: vendor
                  key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
                  restore-keys: ${{ runner.os }}-composer-

            # Installation des dépendances PHP via Composer
            - name: Install dependencies
              run: composer install --prefer-dist --no-progress

            # Création du fichier .env pour les tests de qualité
            - name: Create .env file
              run: |
                  cat << EOF > .env
                  APP_ENV=dev
                  APP_SECRET=${{ env.APP_SECRET }}
                  APP_URL=${{ env.APP_URL }}
                  DATABASE_URL=sqlite:///%kernel.project_dir%/var/test.db
                  DATABASE_HOST=${{ env.DATABASE_HOST }}
                  DATABASE_PORT=${{ env.DATABASE_PORT }}
                  DATABASE_NAME=${{ env.DATABASE_NAME }}
                  DATABASE_USER=${{ env.DATABASE_USER }}
                  DATABASE_PASSWORD=${{ env.DATABASE_PASSWORD }}
                  JWT_SECRET=${{ env.JWT_SECRET }}
                  MAILER_DSN=${{ env.MAILER_DSN }}
                  FRONTEND_URL=${{ env.FRONTEND_URL }}
                  STRIPE_SECRET_KEY=${{ env.STRIPE_SECRET_KEY }}
                  STRIPE_PUBLISHABLE_KEY=${{ env.STRIPE_PUBLISHABLE_KEY }}
                  STRIPE_WEBHOOK_SECRET=${{ env.STRIPE_WEBHOOK_SECRET }}
                  EOF

            # Vérification de la syntaxe PHP sur tous les fichiers source et de test
            - name: PHP Lint
              run: find src tests -name "*.php" -exec php -l {} \;

            # Vérification du formatage du code avec PHP CS Fixer
            - name: PHP CS Fixer
              run: ./vendor/bin/php-cs-fixer fix --dry-run --diff --config=.php-cs-fixer.dist.php

            # Préparation du cache Symfony pour les tests
            - name: Prepare Symfony cache
              run: |
                  php bin/console cache:clear --env=dev
                  php bin/console cache:warmup --env=dev

            # Analyse statique du code avec PHPStan
            - name: PHPStan
              run: ./vendor/bin/phpstan analyse

    # Job 2: Exécution des tests unitaires et d'intégration avec couverture de code
    test:
        runs-on: ubuntu-latest
        needs: quality
        # Configuration du service PostgreSQL pour les tests d'intégration
        services:
            postgres:
                image: postgres:15
                env:
                    POSTGRES_PASSWORD: ${{ env.DATABASE_PASSWORD }}
                    POSTGRES_DB: formbuilder_test
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432

        steps:
            # Récupération du code source depuis le repository
            - uses: actions/checkout@v4

            # Configuration de PHP avec les extensions nécessaires et xdebug pour la couverture
            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ env.PHP_VERSION }}
                  extensions: ${{ env.PHP_EXTENSIONS }}
                  coverage: xdebug

            # Mise en cache des dépendances Composer pour accélérer les builds
            - name: Cache dependencies
              uses: actions/cache@v3
              with:
                  path: vendor
                  key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
                  restore-keys: ${{ runner.os }}-composer-

            # Installation des dépendances PHP via Composer
            - name: Install dependencies
              run: composer install --prefer-dist --no-progress

            # Configuration de l'environnement de test avec les variables d'environnement
            - name: Setup test environment
              run: |
                  cat << EOF > .env.test.local
                  APP_ENV=test
                  APP_URL=${{ env.APP_URL }}
                  DATABASE_HOST=${{ env.DATABASE_HOST }}
                  DATABASE_PORT=${{ env.DATABASE_PORT }}
                  DATABASE_NAME=${{ env.DATABASE_NAME }}
                  DATABASE_USER=${{ env.DATABASE_USER }}
                  DATABASE_PASSWORD=${{ env.DATABASE_PASSWORD }}
                  JWT_SECRET=${{ env.JWT_SECRET }}
                  MAILER_DSN=${{ env.MAILER_DSN }}
                  FRONTEND_URL=${{ env.FRONTEND_URL }}
                  STRIPE_SECRET_KEY=${{ env.STRIPE_SECRET_KEY }}
                  STRIPE_PUBLISHABLE_KEY=${{ env.STRIPE_PUBLISHABLE_KEY }}
                  STRIPE_WEBHOOK_SECRET=${{ env.STRIPE_WEBHOOK_SECRET }}
                  EOF

            # Initialisation de la base de données de test avec le schéma et les fixtures
            - name: Setup database
              run: |
                  php bin/console doctrine:schema:create --env=test
                  php bin/console doctrine:fixtures:load --env=test --no-interaction

            # Exécution des tests PHPUnit avec génération du rapport de couverture
            - name: Run tests with coverage
              run: ./vendor/bin/phpunit --coverage-clover=coverage.xml --coverage-text --coverage-filter=src

            # Upload du rapport de couverture vers Codecov pour le suivi
            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  file: ./coverage.xml
                  flags: unittests
                  name: codecov-umbrella

            # Nettoyage de la base de données de test après les tests
            - name: Cleanup
              run: php bin/console doctrine:schema:drop --env=test --force

    # Job 3: Vérification de sécurité des dépendances
    security:
        runs-on: ubuntu-latest
        needs: quality
        steps:
            # Récupération du code source
            - uses: actions/checkout@v4

            # Configuration de PHP (sans xdebug pour la sécurité)
            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ env.PHP_VERSION }}
                  extensions: ${{ env.PHP_EXTENSIONS }}

            # Mise en cache des dépendances pour accélérer les builds
            - name: Cache dependencies
              uses: actions/cache@v3
              with:
                  path: vendor
                  key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
                  restore-keys: ${{ runner.os }}-composer-

            # Installation des dépendances PHP via Composer
            - name: Install dependencies
              run: composer install --prefer-dist --no-progress

            # Vérification des vulnérabilités de sécurité dans les dépendances
            - name: Security audit
              run: composer audit --format=json --no-interaction

    # Job 4: Déploiement vers Fly.io (production)
    deploy:
        needs: [quality, test, security]
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        steps:
            # Récupération du code source
            - uses: actions/checkout@v4

            # Installation de l'outil de déploiement Fly.io
            - uses: superfly/flyctl-actions/setup-flyctl@master

            # Déploiement de l'application vers Fly.io
            - name: Deploy to Fly.io
              run: flyctl deploy --remote-only
              env:
                  # Token d'authentification Fly.io (secret GitHub)
                  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
